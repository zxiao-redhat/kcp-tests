// Code generated by go-bindata.
// sources:
// authorization/bind-workspace-cluster-role.yaml
// authorization/create-workspace-cluster-role.yaml
// DO NOT EDIT!

package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _authorizationBindWorkspaceClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\x3d\x6f\x83\x30\x10\xc6\xf1\xdd\x9f\xe2\x86\x0e\x65\x28\x55\xb7\xca\x1b\x45\x56\x87\x52\xa8\x4c\x49\xc6\xe8\x80\x4b\x72\x01\x6c\xe4\x97\x0c\xf9\xf4\x51\x44\x06\xa4\x48\x59\x1f\x3d\xfa\xe9\x8f\x33\x6f\xc8\x79\xb6\x46\x82\x6b\xb1\x4b\x31\x86\xa3\x75\x7c\xc1\xc0\xd6\xa4\xc3\xa7\x4f\xd9\xbe\x9f\x3f\xc4\xc0\xa6\x97\x90\x8f\xd1\x07\x72\xda\x8e\xf4\xc5\xa6\x67\x73\x10\x13\x05\xec\x31\xa0\x14\x00\x06\x27\x92\xf0\xf2\x5a\x66\xbf\x2a\x11\x00\xdd\x72\x2f\xef\xf3\xb6\xd2\x3f\xf5\x5f\x96\xab\x44\xf8\xd8\x9e\xa8\x0b\x5e\x8a\x37\x58\xe8\xc6\x93\x5b\x11\x4d\xad\xf4\xc2\x38\x3b\x92\xa6\xfd\xcd\xc7\x99\xbf\x9d\x8d\xf3\x93\x56\x01\xf0\x90\xba\x62\xf3\xa2\xa9\xff\x95\xde\xe9\xaa\x50\xc9\x35\x00\x00\xff\xff\xbd\x22\xa5\xa1\xfd\x00\x00\x00")

func authorizationBindWorkspaceClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_authorizationBindWorkspaceClusterRoleYaml,
		"test/extended/testdata/authorization/bind-workspace-cluster-role.yaml",
	)
}

func authorizationBindWorkspaceClusterRoleYaml() (*asset, error) {
	bytes, err := authorizationBindWorkspaceClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/authorization/bind-workspace-cluster-role.yaml", size: 253, mode: os.FileMode(420), modTime: time.Unix(1661324226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _authorizationCreateWorkspaceClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x31\x4b\x03\x41\x10\x05\xe0\x7e\x7f\xc5\x14\x29\x72\x45\x36\xd8\xc9\x76\x31\x1c\x16\x62\x94\x13\x62\x3d\xd9\x1b\x70\xb9\xcb\xcc\x32\x33\x7b\xa2\xbf\x5e\x82\x27\x58\xbe\xc7\xf7\x78\x58\xcb\x99\xd4\x8a\x70\x02\xbd\x60\x8e\xd8\xfc\x43\xb4\x7c\xa3\x17\xe1\x38\xdd\x5b\x2c\xb2\x5f\xee\xc2\x54\x78\x4c\x70\x9c\x9b\x39\xe9\x20\x33\x85\x2b\x39\x8e\xe8\x98\x02\x00\xe3\x95\x12\x6c\xb6\xa7\xc3\x73\xdf\x05\x80\xfc\xeb\x4e\x6b\xfd\xfe\x32\x3c\xbd\xbd\x1e\x8e\x7d\x17\xb4\xcd\x64\x29\xec\x00\x6b\x79\x54\x69\xd5\x6e\xfb\x1d\x38\x31\x72\xfe\x8a\x53\xae\x71\xa4\x25\x00\x28\x99\x34\xcd\xb4\x82\x4f\xd1\xc9\x2a\x66\xb2\x7d\x16\x76\x62\xff\x67\x6e\x47\x7f\xce\x02\xc0\x42\x7a\x59\xf3\x66\x7b\xee\x87\x87\xee\x27\x00\x00\xff\xff\xbb\xa0\x7d\xee\xe9\x00\x00\x00")

func authorizationCreateWorkspaceClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_authorizationCreateWorkspaceClusterRoleYaml,
		"test/extended/testdata/authorization/create-workspace-cluster-role.yaml",
	)
}

func authorizationCreateWorkspaceClusterRoleYaml() (*asset, error) {
	bytes, err := authorizationCreateWorkspaceClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test/extended/testdata/authorization/create-workspace-cluster-role.yaml", size: 233, mode: os.FileMode(420), modTime: time.Unix(1661324236, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test/extended/testdata/authorization/bind-workspace-cluster-role.yaml": authorizationBindWorkspaceClusterRoleYaml,
	"test/extended/testdata/authorization/create-workspace-cluster-role.yaml": authorizationCreateWorkspaceClusterRoleYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"authorization": &bintree{nil, map[string]*bintree{
		"test/extended/testdata/bind-workspace-cluster-role.yaml": &bintree{authorizationBindWorkspaceClusterRoleYaml, map[string]*bintree{}},
		"test/extended/testdata/create-workspace-cluster-role.yaml": &bintree{authorizationCreateWorkspaceClusterRoleYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
